// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<StackedBarGraph> renders with both snap and section8 1`] = `
<StackedBarGraph
  client={
    Immutable.Map {
      USState: "MA",
      current: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 100,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
          "snap",
          "section8",
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "voucher",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
      future: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 200,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "homeless",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
    }
  }
>
  <Bar
    data={
      Object {
        "datasets": Array [
          Object {
            "backgroundColor": "rgb(136, 187, 236)",
            "data": Array [
              100,
              200,
            ],
            "fill": "origin",
            "label": "Earned",
          },
          Object {
            "backgroundColor": "rgba(101, 47, 138, 1)",
            "data": Array [
              192,
              192,
            ],
            "label": "SNAP",
          },
          Object {
            "backgroundColor": "rgba(206, 203, 61, 1)",
            "data": Array [
              0,
              0,
            ],
            "label": "Section 8 Housing",
          },
        ],
        "labels": Array [
          100,
          200,
        ],
      }
    }
    options={
      Object {
        "scales": Object {
          "xAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Monthly Pay ($)",
              },
              "stacked": true,
              "ticks": Object {
                "callback": [Function],
              },
            },
          ],
          "yAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Total Money Coming In ($)",
              },
              "stacked": true,
              "ticks": Object {
                "beginAtZero": true,
                "callback": [Function],
              },
            },
          ],
        },
        "title": Object {
          "display": true,
          "text": "Money Coming In as Pay Changes",
        },
        "tooltips": Object {
          "callbacks": Object {
            "label": [Function],
            "title": [Function],
          },
        },
      }
    }
  >
    <BarMock
      data={
        Object {
          "datasets": Array [
            Object {
              "backgroundColor": "rgb(136, 187, 236)",
              "data": Array [
                100,
                200,
              ],
              "fill": "origin",
              "label": "Earned",
            },
            Object {
              "backgroundColor": "rgba(101, 47, 138, 1)",
              "data": Array [
                192,
                192,
              ],
              "label": "SNAP",
            },
            Object {
              "backgroundColor": "rgba(206, 203, 61, 1)",
              "data": Array [
                0,
                0,
              ],
              "label": "Section 8 Housing",
            },
          ],
          "labels": Array [
            100,
            200,
          ],
        }
      }
      options={
        Object {
          "scales": Object {
            "xAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Monthly Pay ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "callback": [Function],
                },
              },
            ],
            "yAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Total Money Coming In ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "beginAtZero": true,
                  "callback": [Function],
                },
              },
            ],
          },
          "title": Object {
            "display": true,
            "text": "Money Coming In as Pay Changes",
          },
          "tooltips": Object {
            "callbacks": Object {
              "label": [Function],
              "title": [Function],
            },
          },
        }
      }
    />
  </Bar>
</StackedBarGraph>
`;

exports[`<StackedBarGraph> renders with section8 1`] = `
<StackedBarGraph
  client={
    Immutable.Map {
      USState: "MA",
      current: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 100,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
          "section8",
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "voucher",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
      future: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 200,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "homeless",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
    }
  }
>
  <Bar
    data={
      Object {
        "datasets": Array [
          Object {
            "backgroundColor": "rgb(136, 187, 236)",
            "data": Array [
              100,
              200,
            ],
            "fill": "origin",
            "label": "Earned",
          },
          Object {
            "backgroundColor": "rgba(206, 203, 61, 1)",
            "data": Array [
              0,
              0,
            ],
            "label": "Section 8 Housing",
          },
        ],
        "labels": Array [
          100,
          200,
        ],
      }
    }
    options={
      Object {
        "scales": Object {
          "xAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Monthly Pay ($)",
              },
              "stacked": true,
              "ticks": Object {
                "callback": [Function],
              },
            },
          ],
          "yAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Total Money Coming In ($)",
              },
              "stacked": true,
              "ticks": Object {
                "beginAtZero": true,
                "callback": [Function],
              },
            },
          ],
        },
        "title": Object {
          "display": true,
          "text": "Money Coming In as Pay Changes",
        },
        "tooltips": Object {
          "callbacks": Object {
            "label": [Function],
            "title": [Function],
          },
        },
      }
    }
  >
    <BarMock
      data={
        Object {
          "datasets": Array [
            Object {
              "backgroundColor": "rgb(136, 187, 236)",
              "data": Array [
                100,
                200,
              ],
              "fill": "origin",
              "label": "Earned",
            },
            Object {
              "backgroundColor": "rgba(206, 203, 61, 1)",
              "data": Array [
                0,
                0,
              ],
              "label": "Section 8 Housing",
            },
          ],
          "labels": Array [
            100,
            200,
          ],
        }
      }
      options={
        Object {
          "scales": Object {
            "xAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Monthly Pay ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "callback": [Function],
                },
              },
            ],
            "yAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Total Money Coming In ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "beginAtZero": true,
                  "callback": [Function],
                },
              },
            ],
          },
          "title": Object {
            "display": true,
            "text": "Money Coming In as Pay Changes",
          },
          "tooltips": Object {
            "callbacks": Object {
              "label": [Function],
              "title": [Function],
            },
          },
        }
      }
    />
  </Bar>
</StackedBarGraph>
`;

exports[`<StackedBarGraph> renders with snap and current earned greater than future earned 1`] = `
<StackedBarGraph
  client={
    Immutable.Map {
      USState: "MA",
      current: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 200,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
          "snap",
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "homeless",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
      future: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 100,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "homeless",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
    }
  }
>
  <Bar
    data={
      Object {
        "datasets": Array [
          Object {
            "backgroundColor": "rgb(136, 187, 236)",
            "data": Array [
              200,
              100,
            ],
            "fill": "origin",
            "label": "Earned",
          },
          Object {
            "backgroundColor": "rgba(101, 47, 138, 1)",
            "data": Array [
              192,
              192,
            ],
            "label": "SNAP",
          },
        ],
        "labels": Array [
          200,
          100,
        ],
      }
    }
    options={
      Object {
        "scales": Object {
          "xAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Monthly Pay ($)",
              },
              "stacked": true,
              "ticks": Object {
                "callback": [Function],
              },
            },
          ],
          "yAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Total Money Coming In ($)",
              },
              "stacked": true,
              "ticks": Object {
                "beginAtZero": true,
                "callback": [Function],
              },
            },
          ],
        },
        "title": Object {
          "display": true,
          "text": "Money Coming In as Pay Changes",
        },
        "tooltips": Object {
          "callbacks": Object {
            "label": [Function],
            "title": [Function],
          },
        },
      }
    }
  >
    <BarMock
      data={
        Object {
          "datasets": Array [
            Object {
              "backgroundColor": "rgb(136, 187, 236)",
              "data": Array [
                200,
                100,
              ],
              "fill": "origin",
              "label": "Earned",
            },
            Object {
              "backgroundColor": "rgba(101, 47, 138, 1)",
              "data": Array [
                192,
                192,
              ],
              "label": "SNAP",
            },
          ],
          "labels": Array [
            200,
            100,
          ],
        }
      }
      options={
        Object {
          "scales": Object {
            "xAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Monthly Pay ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "callback": [Function],
                },
              },
            ],
            "yAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Total Money Coming In ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "beginAtZero": true,
                  "callback": [Function],
                },
              },
            ],
          },
          "title": Object {
            "display": true,
            "text": "Money Coming In as Pay Changes",
          },
          "tooltips": Object {
            "callbacks": Object {
              "label": [Function],
              "title": [Function],
            },
          },
        }
      }
    />
  </Bar>
</StackedBarGraph>
`;

exports[`<StackedBarGraph> renders with snap and current earned less than future earned 1`] = `
<StackedBarGraph
  client={
    Immutable.Map {
      USState: "MA",
      current: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 100,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
          "snap",
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "homeless",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
      future: Immutable.Map {
        otherExpensesCareProducts: 0,
        otherMedical: 0,
        otherExpensesPhone: 0,
        workersComp: 0,
        childOtherCare: 0,
        earnedBecauseOfAdultCare: 0,
        SSDI: 0,
        unemployment: 0,
        otherExpensesOther: 0,
        childBeforeAndAfterSchoolCare: 0,
        rentShare: 0,
        otherExpensesMedical: 0,
        adultTransportation: 0,
        adultOtherCare: 0,
        earnedBecauseOfChildCare: 0,
        childTransportation: 0,
        otherExpensesFood: 0,
        SSI: 0,
        alimony: 0,
        contractRent: 0,
        socialSecurity: 0,
        phone: false,
        fuelAssistance: false,
        pension: 0,
        childSupportPaidOut: 0,
        otherExpensesCable: 0,
        disabledAssistance: 0,
        nonHeatElectricity: false,
        adultDirectCare: 0,
        disabledMedical: 0,
        childDirectCare: 0,
        propertyTax: 0,
        wantsToSeeOtherExpenses: false,
        earned: 200,
        climateControl: false,
        TAFDC: 0,
        childSupportIn: 0,
        otherIncome: 0,
        rent: 0,
        mortgage: 0,
        benefits: Immutable.Set [
        ],
        otherExpensesEntertainment: 0,
        housingInsurance: 0,
        otherExpensesClothes: 0,
        housing: "homeless",
        otherExpensesTransport: 0,
        otherExpensesUtilities: 0,
        household: Immutable.List [
          Immutable.Map {
            m_age: 30,
            m_role: "head",
            m_disabled: false,
          },
        ],
      },
    }
  }
>
  <Bar
    data={
      Object {
        "datasets": Array [
          Object {
            "backgroundColor": "rgb(136, 187, 236)",
            "data": Array [
              100,
              200,
            ],
            "fill": "origin",
            "label": "Earned",
          },
          Object {
            "backgroundColor": "rgba(101, 47, 138, 1)",
            "data": Array [
              192,
              192,
            ],
            "label": "SNAP",
          },
        ],
        "labels": Array [
          100,
          200,
        ],
      }
    }
    options={
      Object {
        "scales": Object {
          "xAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Monthly Pay ($)",
              },
              "stacked": true,
              "ticks": Object {
                "callback": [Function],
              },
            },
          ],
          "yAxes": Array [
            Object {
              "scaleLabel": Object {
                "display": true,
                "labelString": "Total Money Coming In ($)",
              },
              "stacked": true,
              "ticks": Object {
                "beginAtZero": true,
                "callback": [Function],
              },
            },
          ],
        },
        "title": Object {
          "display": true,
          "text": "Money Coming In as Pay Changes",
        },
        "tooltips": Object {
          "callbacks": Object {
            "label": [Function],
            "title": [Function],
          },
        },
      }
    }
  >
    <BarMock
      data={
        Object {
          "datasets": Array [
            Object {
              "backgroundColor": "rgb(136, 187, 236)",
              "data": Array [
                100,
                200,
              ],
              "fill": "origin",
              "label": "Earned",
            },
            Object {
              "backgroundColor": "rgba(101, 47, 138, 1)",
              "data": Array [
                192,
                192,
              ],
              "label": "SNAP",
            },
          ],
          "labels": Array [
            100,
            200,
          ],
        }
      }
      options={
        Object {
          "scales": Object {
            "xAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Monthly Pay ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "callback": [Function],
                },
              },
            ],
            "yAxes": Array [
              Object {
                "scaleLabel": Object {
                  "display": true,
                  "labelString": "Total Money Coming In ($)",
                },
                "stacked": true,
                "ticks": Object {
                  "beginAtZero": true,
                  "callback": [Function],
                },
              },
            ],
          },
          "title": Object {
            "display": true,
            "text": "Money Coming In as Pay Changes",
          },
          "tooltips": Object {
            "callbacks": Object {
              "label": [Function],
              "title": [Function],
            },
          },
        }
      }
    />
  </Bar>
</StackedBarGraph>
`;
